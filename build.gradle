buildscript {
	ext {
		amazonAWS = '1.9.0'
		springBootVersion = '1.3.2.RELEASE'
		coverageFilesDir = 'build/coverage-files'
		jacocoVersion = '0.7.1.201405082137'
		testNGVersion = '6.8.21'
		assertj = '3.3.0'
		mockitoVersion = '1.8.4' 
		jerseyVersion = '2.23.1'
		restAssuredVersion = '2.5.0'
		swaggerJerseyVersion = '1.5.3'
		serenityVersion = '1.1.24'
		serenityJbehave = '1.5.0'
		jbehaveVersion = '4.0.4'
		assertjVersion = '2.2.0'
		jsonPath = '2.1.0'
		gitPropertiesVersion = '1.4.7'
		jerseySecurityVersion = '2.17'
		guavaVersion = '19.0'
		springContextSupport = '4.2.6.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE")
		classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gitPropertiesVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'eclipse'
apply plugin: 'io.spring.dependency-management' 
apply plugin: 'com.gorylenko.gradle-git-properties'

jar {
	baseName = 'sample'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'    
    resolutionStrategy.dependencySubstitution {
    	// Substitute one module dependency for another
    	//jersey 2.22.1 is being replaced by 2.23.1 a we want to use LoggingFeature 
    	substitute module("org.glassfish.jersey.containers:jersey-container-servlet-core:2.22.1") with module("org.glassfish.jersey.containers:jersey-container-servlet-core:${jerseyVersion}")
    	substitute module("org.glassfish.jersey.containers:jersey-container-servlet:2.22.1") with module("org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}")
  } 
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-integration:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-jersey:${springBootVersion}")
	compile("org.springframework.cloud:spring-cloud-starter-hystrix:1.0.6.RELEASE"){
		exclude group: 'com.netflix.archaius', module: 'archaius-core'
	}
	compile("com.netflix.archaius:archaius-core:0.7.4")		
	compile("io.swagger:swagger-jersey2-jaxrs:${swaggerJerseyVersion}")
	compile("org.apache.httpcomponents:httpclient:4.5.2")
	compile("org.apache.httpcomponents:httpcore:4.4.4")
	compile("com.jayway.jsonpath:json-path:${jsonPath}")
	compile("com.google.guava:guava:${guavaVersion}")
	compile("org.springframework:spring-context-support:${springContextSupport}")
	compile group: 'org.springframework.cloud', name: 'spring-cloud-aws-messaging', version: '1.1.3.RELEASE'
}

tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
	systemProperties = System.properties
}

eclipse {
	classpath {
		containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.10'
}
